//
//  LogoView.swift
//  Trace
//
//  Created by Daria on 01.07.17.
//  Copyright Â© 2017 Daria. All rights reserved.
//

import UIKit
 //change status after ending gradient
protocol LogoTraceDelegate{
    func logoTraceComlete()
}

@IBDesignable
class LogoView: UIView {
   
    var yPositionPercantage: CGFloat = 0
    var traceCompleted = false
    
    var delegate: LogoTraceDelegate?
    
    
        override func draw(_ rect: CGRect) {
            
            // This code was generated by Trial version of PaintCode
            // http://www.paintcodeapp.com
            
            //// General Declarations
            let context = UIGraphicsGetCurrentContext()!
            
            //// Color Declarations
            let color = UIColor(red: 0.882, green: 0.882, blue: 0.851, alpha: 1.000)
            let gradientColor = UIColor(red: 0.157, green: 0.169, blue: 0.208, alpha: 1.000)
            let gradientColor3 = UIColor(red: 0.498, green: 0.498, blue: 0.620, alpha: 1.000)
            
            //// Gradient Declarations
            let gradient = CGGradient(colorsSpace: nil, colors: [gradientColor.cgColor, gradientColor3.cgColor] as CFArray, locations: [0, 1])!
            
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 1, y: 1, width: 61, height: 213))
            context.saveGState()
            rectanglePath.addClip()
            context.drawLinearGradient(gradient, start: CGPoint(x: 32.5, y: 1), end: CGPoint(x: 32.5, y: self.frame.height * yPositionPercantage), options: []) //upgrade gradient according to user's finger position
            context.restoreGState()
            color.setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()
            
            
        }
    // gradient without ggesture recognizer
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        if let touchPoint = touches.first?.location(in: self){
            yPositionPercantage = touchPoint.y / self.frame.size.height
            updateDrowing()
        }
    }
        
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        updateDrowing()
        if yPositionPercantage >= 1 {
            traceCompleted = true
            if delegate != nil {
                delegate?.logoTraceComlete()
            }
        }
    }
    
    func updateDrowing() {
        if !traceCompleted{
            if yPositionPercantage > 0 && yPositionPercantage < 1{
        
        self.setNeedsDisplay()
            }
    }
    
    }



}
